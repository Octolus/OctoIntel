name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'  # Trigger on version tags like v2.0.0
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build debug
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose

  build-release:
    name: Build Release Binaries
    needs: test
    if: startsWith(github.ref, 'refs/tags/')  # Only run on tag pushes
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: reverse-proxy-reveal
            asset_name: reverse-proxy-reveal-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: reverse-proxy-reveal.exe
            asset_name: reverse-proxy-reveal-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: reverse-proxy-reveal
            asset_name: reverse-proxy-reveal-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: reverse-proxy-reveal
            asset_name: reverse-proxy-reveal-macos-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-build-
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --verbose
    
    - name: Strip binary (Unix)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
    
    - name: Create artifact directory
      run: mkdir -p artifacts
      shell: bash
    
    - name: Copy binary to artifacts (Unix)
      if: runner.os != 'Windows'
      run: cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
    
    - name: Copy binary to artifacts (Windows)
      if: runner.os == 'Windows'
      run: copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}
      shell: cmd
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}
        if-no-files-found: error
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/${{ matrix.asset_name }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit --locked
    
    - name: Run security audit
      run: cargo audit
    
    - name: Run cargo deny
      continue-on-error: true
      run: |
        cargo install cargo-deny --locked
        cargo deny check advisories

